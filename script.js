"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
let map;
let mapEvent;

class Workout {
  date = new Date();
  id = (Date.now() + "").slice(-10);
  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance;
    this.duration = duration;
  }
  _setDescription() {
    // prettier-ignore
    const months = ["January", "February", "March", "April", "May", "June", "July", 
      "August", "September", "October", "November", "December"
    ];
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }
}

class Running extends Workout {
  type = "running";
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calPace();
    this._setDescription();
  }
  calPace() {
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = "cycling";
  constructor(coords, distance, duration, elevation) {
    super(coords, distance, duration);
    this.elevation = elevation;
    this.calcSpeed();
    this._setDescription();
  }
  calcSpeed() {
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}
const run1 = new Running([-4, -35], 5.2, 24, 17);
const cyc1 = new Cycling([-4, -35], 26, 90, 520);

class App {
  _workouts = [];
  _map;
  _mapEvent;
  constructor() {
    // –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this._getPosition();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
    this._getLocalStorage();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ __newWorkout.
    form.addEventListener("submit", this._newWorkout.bind(this));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ _toogleField.
    inputType.addEventListener("change", this._toggleField);

    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this));
  }
  _getPosition() {
    if (navigator.geolocation) {
      // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –±—Ä–∞—É–∑–µ—Ä–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ API
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this), // –Ω—É–∂–Ω–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å this –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∞ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–∏ this –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å undefined

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞
        function () {
          // —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞, –µ—Å–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          alert("–í—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏.");
        }
      );
    }
  }

  // –ú–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    const coords = [latitude, longitude];
    this._map = L.map("map").setView(coords, 13); // 13 - —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑—É–º–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –∑–Ω–∞—á–∏—Ç –±–ª–∏–∂–µ (–Ω–∞ 5 –≤–∏–¥–Ω–æ —Å—Ç—Ä–∞–Ω—ã)

    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this._map);

    //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –ø–æ –∫–∞—Ä—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –º–µ—Ç–æ–¥ _showForm
    this._map.on("click", this._showForm.bind(this));

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞
    this._workouts.forEach((work) => 
    this._renderWorkMarker(work));
  }

  //–ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–µ.
  _showForm(mapE) {
    this._mapEvent = mapE; // this –≤ –æ–±—Ä–æ–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏—è - —ç—Ç–æ DOM - —ç–ª–µ–º–µ–Ω—Ç, —Å –æ—Ç–æ—Ä—ã–º –º—ã —Ä–∞–±–æ—Ç–∞–µ–º
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  // –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
  _toggleField() {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  }

  // –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É.
  _newWorkout(e) {
    e.preventDefault();

    const validInputs = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp)); // ifFinite - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –µ–º—É –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ, –¥–∞–µ—Ç false –µ—Å–ª–∏ –µ–º—É –ø–µ—Ä–µ–¥–∞–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);

    // –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this._mapEvent.latlng;
    let workout;

    if (type === "running") {
      const cadence = +inputCadence.value;
      if (
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
      }
      workout = new Running([lat, lng], distance, duration, cadence);
    }
    if (type === "cycling") {
      const elevation = +inputElevation.value;
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration) // elevation (–ø–æ–¥—ä–µ–º) –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
      }
      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // –î–æ–±–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∞—Å—Å–∏–≤
    this._workouts.push(workout);

    // –†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    this._renderWorkMarker(workout);

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    this._renderWorkout(workout);

    // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
    this._hideForm();

    this._setLocalStorage();
  }
  _renderWorkMarker(workout) {
    L.marker(workout.coords)
      .addTo(this._map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: "mark-popup",
        })
      )
      .setPopupContent(
        `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${workout.description}`
      )
      .openPopup();
  }
  // –û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";
    form.classList.add("hidden");
  }
  _renderWorkout(workout) {
    let html = `
    <li class="workout workout--${workout.type}" data-id="${workout.id}">
    <h2 class="workout__title">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>`;
    if (workout.type === "running") {
      html += `
      <div class="workout__details">
        <span class="workout__icon">‚ö°Ô∏è</span>
        <span class="workout__value">${workout.pace.toFixed(1)}</span>
        <span class="workout__unit">–º–∏–Ω/–∫–º</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">ü¶∂üèª</span>
        <span class="workout__value">${workout.cadence}</span>
        <span class="workout__unit">—à–∞–≥</span>
      </div>
      `;
    }
    if (workout.type === "cycling") {
      html += `
      <div class="workout__details">
        <span class="workout__icon">‚ö°Ô∏è</span>
        <span class="workout__value">${workout.speed.toFixed(1)}</span>
        <span class="workout__unit">–∫–º/—á–∞—Å</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">üóª</span>
        <span class="workout__value">${workout.elevation}</span>
        <span class="workout__unit">–º</span>
      </div>
      `;
    }
    form.insertAdjacentHTML("afterend", html);
  }
  _moveToPopup(e) {
    const workoutEL = e.target.closest('.workout');
    if (!workoutEL) return;

    const workout = this._workouts.find(work => work.id === workoutEL.dataset.id);
    this._map.setView(workout.coords, 13, {animate: true, pan: {duration: 1}})
  }
  
  _setLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this._workouts)) // –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ JSON —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
  }
  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts'));
    console.log(data);
    if (!data) return;
    this._workouts = data;
    this._workouts.forEach((work) => this._renderWorkout(work));
  }

  // –≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–Ω–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ local storage
  reset() {
    localStorage.removeItem();
    location.reload();
  }
}

const app = new App();
